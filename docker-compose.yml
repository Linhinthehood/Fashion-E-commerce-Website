version: '3.8'

services:
  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: fashion_ecommerce_user_service
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - PORT=3001
      - MONGODB_URI=mongodb+srv://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_CLUSTER}/users?retryWrites=true&w=majority&appName=Cluster0
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=${JWT_EXPIRE}
      - NODE_ENV=${NODE_ENV}
      - FRONTEND_URL=http://localhost:5173
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    networks:
      - fashion_network

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    container_name: fashion_ecommerce_product_service
    restart: unless-stopped
    ports:
      - "3002:3002"
    env_file:
      - .env
    environment:
      - PORT=3002
      - MONGODB_URI=mongodb+srv://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_CLUSTER}/products?retryWrites=true&w=majority&appName=Cluster0
      - NODE_ENV=${NODE_ENV}
      - FRONTEND_URL=http://localhost:3000
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    networks:
      - fashion_network

  # Order Service
  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile
    container_name: fashion_ecommerce_order_service
    restart: unless-stopped
    ports:
      - "3003:3003"
    env_file:
      - .env
    environment:
      - PORT=3003
      - MONGODB_URI=mongodb+srv://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_CLUSTER}/orders?retryWrites=true&w=majority&appName=Cluster0
      - NODE_ENV=${NODE_ENV}
      - FRONTEND_URL=http://localhost:5173
      - USER_SERVICE_URL=http://user-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    depends_on:
      - user-service
      - product-service
    networks:
      - fashion_network

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: fashion_ecommerce_api_gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - PORT=3000
      - FRONTEND_URL=http://localhost:5173
      - USER_SERVICE_URL=http://user-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - ORDER_SERVICE_URL=http://order-service:3003
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - user-service
      - product-service
      - order-service
    networks:
      - fashion_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fashion_ecommerce_frontend
    restart: unless-stopped
    ports:
      - "5173:80"
    environment:
      - VITE_API_URL=http://localhost:3000/api
    depends_on:
      - api-gateway
    networks:
      - fashion_network

volumes:
  mongodb_data:
    driver: local

networks:
  fashion_network:
    driver: bridge
